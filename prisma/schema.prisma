// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  username          String        @unique
  password          String
  email             String        @unique
  role              String?
  requirement_basic String?
  requirements      Requirement[]
  recipes           Recipe[]
  reviews           Review[]
  savedRecipes      SavedRecipe[]

  @@map("users")
}

model Requirement {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  content    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  recipe     Recipe?

  @@map("requirements")
}

model Recipe {
  id             Int           @id @default(autoincrement())
  created_at     DateTime      @default(now())
  title          String
  description    String?
  views          Int           @default(0)
  score          Float?
  user           User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id        Int
  requirement    Requirement   @relation(fields: [requirement_id], references: [id], onDelete: Cascade)
  requirement_id Int           @unique
  reviews        Review[]
  savedRecipes   SavedRecipe[]

  @@map("recipes")
}

model SavedRecipe {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  recipe     Recipe   @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
  recipe_id  Int

  @@unique([user_id, recipe_id])
  @@map("saved_recipes")
}

model Review {
  review_id  Int      @id @default(autoincrement())
  content    String?
  rating     Int
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  recipe     Recipe   @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
  recipe_id  Int

  @@map("reviews")
}
